name: Iranian Archive Manager

on:
  workflow_dispatch:
    inputs:
      category:
        description: 'Category to process (all/old-newspaper/newspaper)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - old-newspaper
          - newspaper
      enable_monitoring:
        description: 'Enable performance monitoring'
        required: false
        default: true
        type: boolean
      enable_debugging:
        description: 'Enable detailed debugging output'
        required: false
        default: false
        type: boolean
      benchmark_mode:
        description: 'Run in benchmark mode with detailed analysis'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Run in dry-run mode (no actual downloads)'
        required: false
        default: false
        type: boolean
  schedule:
    # Daily at 2 AM UTC for newspaper updates
    - cron: '0 2 * * *'

permissions:
  contents: write
  actions: read

env:
  MAX_FILE_SIZE: 52428800  # 50MB in bytes
  DOWNLOAD_TIMEOUT: 300    # 5 minutes
  MAX_RETRIES: 3

jobs:
  archive-manager:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests psutil pandas matplotlib beautifulsoup4

      - name: Determine execution mode
        id: mode
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "category=newspaper" >> $GITHUB_OUTPUT
            echo "mode=scheduled" >> $GITHUB_OUTPUT
            echo "enable_monitoring=true" >> $GITHUB_OUTPUT
            echo "enable_debugging=false" >> $GITHUB_OUTPUT
            echo "benchmark_mode=false" >> $GITHUB_OUTPUT
          else
            echo "category=${{ github.event.inputs.category || 'all' }}" >> $GITHUB_OUTPUT
            echo "mode=manual" >> $GITHUB_OUTPUT
            echo "enable_monitoring=${{ github.event.inputs.enable_monitoring || 'true' }}" >> $GITHUB_OUTPUT
            echo "enable_debugging=${{ github.event.inputs.enable_debugging || 'false' }}" >> $GITHUB_OUTPUT
            echo "benchmark_mode=${{ github.event.inputs.benchmark_mode || 'false' }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_OUTPUT
          fi

      - name: Run archive manager with monitoring
        run: |
          # Build command with monitoring options
          CMD="python scripts/workflow_orchestrator.py"
          
          if [ "${{ steps.mode.outputs.mode }}" = "scheduled" ]; then
            CMD="$CMD --scheduled"
          fi
          
          if [ "${{ steps.mode.outputs.enable_monitoring }}" = "false" ]; then
            CMD="$CMD --no-monitoring"
          fi
          
          if [ "${{ steps.mode.outputs.enable_debugging }}" = "true" ]; then
            CMD="$CMD --debug"
          fi
          
          if [ "${{ steps.mode.outputs.benchmark_mode }}" = "true" ]; then
            CMD="$CMD --benchmark"
          fi
          
          # Add verbose flag
          CMD="$CMD --verbose"
          
          # Add dry-run flag if requested
          if [ "${{ steps.mode.outputs.dry_run }}" = "true" ]; then
            CMD="$CMD --dry-run"
          fi
          
          echo "Executing: $CMD"
          $CMD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload performance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-data-${{ github.run_number }}
          path: |
            performance_metrics_*.json
            debug_info_*.json
            performance_charts_*.png
            workflow_summary_*.md
          retention-days: 30

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "$(cat commit_message.txt 2>/dev/null || echo 'Archive update completed')"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Performance Summary
        if: always()
        run: |
          echo "## Workflow Performance Summary" >> $GITHUB_STEP_SUMMARY
          
          # Find the most recent performance metrics file
          METRICS_FILE=$(ls -t performance_metrics_*.json 2>/dev/null | head -1)
          
          if [ -n "$METRICS_FILE" ] && [ -f "$METRICS_FILE" ]; then
            echo "### Performance Metrics" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics using jq if available, otherwise use basic parsing
            if command -v jq >/dev/null 2>&1; then
              EXEC_TIME=$(jq -r '.execution_time' "$METRICS_FILE" 2>/dev/null || echo "N/A")
              MEMORY_DELTA=$(jq -r '.memory_delta_mb' "$METRICS_FILE" 2>/dev/null || echo "N/A")
              FILES_PROCESSED=$(jq -r '.files_processed' "$METRICS_FILE" 2>/dev/null || echo "N/A")
              FILES_PER_SEC=$(jq -r '.files_per_second' "$METRICS_FILE" 2>/dev/null || echo "N/A")
              
              echo "| Execution Time | ${EXEC_TIME}s |" >> $GITHUB_STEP_SUMMARY
              echo "| Memory Usage | ${MEMORY_DELTA} MB |" >> $GITHUB_STEP_SUMMARY
              echo "| Files Processed | $FILES_PROCESSED |" >> $GITHUB_STEP_SUMMARY
              echo "| Processing Rate | ${FILES_PER_SEC} files/sec |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Performance Data | Available in artifacts |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No performance metrics available" >> $GITHUB_STEP_SUMMARY
          fi